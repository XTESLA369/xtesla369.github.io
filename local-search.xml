<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>UE4</title>
    <link href="/2020/08/14/%E3%80%90UE4%E3%80%91%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/"/>
    <url>/2020/08/14/%E3%80%90UE4%E3%80%91%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<p>哎，从GI全局光照过来的。这类高端知识联系可真紧密啊。</p><p>光线追踪、实时渲染、全局光照。。。搞得我头晕哪，那是因为头发少了，阳气不足，它好我也好。</p><h2 id="虚幻官方教学视频："><a href="#虚幻官方教学视频：" class="headerlink" title="虚幻官方教学视频："></a>虚幻官方教学视频：</h2><p><a href="https://link.zhihu.com/?target=https://learn.unrealengine.com/course/2449702">实时渲染基础learn.unrealengine.com</a><a href="https://link.zhihu.com/?target=https://www.unrealengine.com/zh-CN/onlinelearning-courses/an-in-depth-look-at-real-time-rendering">实时渲染进阶www.unrealengine.com</a></p><h2 id="【导图】"><a href="#【导图】" class="headerlink" title="【导图】"></a>【导图】</h2><p><img src="https://pic3.zhimg.com/80/v2-06c0199d181ec08d7557ac166f2e5544_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-ab63fe22a0dbb8be20ef686565d86912_1440w.png" alt="img"></p><h2 id="一、实时渲染基础知识"><a href="#一、实时渲染基础知识" class="headerlink" title="一、实时渲染基础知识"></a>一、实时渲染基础知识</h2><p>【提纲】</p><ul><li>Scalability——可延展性</li><li>Deferred/Forward Rendering——延迟渲染/正向渲染</li><li>GBuffer——G缓冲</li><li>Vertex and Pixel Shader Basics——顶点着色器和像素着色器</li></ul><p><img src="https://pic4.zhimg.com/80/v2-abdbce94a1ee42f04f2046690b4558dc_1440w.jpg" alt="img"></p><hr><h2 id="【1-1】实时渲染相关"><a href="#【1-1】实时渲染相关" class="headerlink" title="【1.1】实时渲染相关"></a>【1.1】实时渲染相关</h2><p><a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%AE%9E%E6%97%B6%E6%B8%B2%E6%9F%93/7556269?fr=aladdin">实时渲染_百度百科baike.baidu.com<img src="https://picb.zhimg.com/v2-a64774de231eee7f3449f6649c9cdaef_180x120.jpg" alt="图标"></a></p><ul><li><strong>本质</strong>——实时渲染的本质就是对图形数据的实时计算和输出。</li><li><strong>重要部分</strong>——性能是实时渲染最重要的部分。</li><li><strong>过程</strong>——实时渲染实质上融合了大量不同的方案，它非常复杂而且要求非常苛刻，并且将部分运算放在预计算阶段。</li></ul><p>实时渲染可以分为两部分：</p><ul><li>一部分是预计算阶段</li><li>另一部分是具体的实时渲染阶段</li></ul><p>比如说剔除对象，剔除决定哪些对象可见，哪些不可见，也就是哪些对象应该被渲染，哪些不被渲染，比如有一个墙体，摄像机正对这个墙体，那么墙体后面的物体就不会被渲染，所以会被剔除掉。</p><p>总共有4种剔除对象的方法，因为很难确定哪些物体可见不可见，所以最后会有很多办法。</p><p>剔除中的一个步骤就是<strong>预计算</strong>，其它全部位于实时渲染阶段。</p><hr><h2 id="【1-2】Scalability——可延展性"><a href="#【1-2】Scalability——可延展性" class="headerlink" title="【1.2】Scalability——可延展性"></a>【1.2】Scalability——可延展性</h2><p>【1.2.1】含义</p><p><strong>为什么叫做可延展性，就是因为渲染效果可以在程序运行时的任何时刻调整渲染效果。</strong></p><p>实时渲染的独特之处在于它可以让我们甚至强制我们可以在任何时刻更改画面质量，也就是渲染质量。</p><p>所以在渲染的时候，渲染的效果可以被随意调整，比如提高或降低帧率、提升画面质量、降低渲染速度等。</p><p>而且它允许内容被移植到不同的设备上运行，不管是应用还是游戏，PC或手机。</p><p>【1.2.2】举例</p><p><strong>【调出虚幻的cmd控制台】</strong></p><ul><li>鼠标在Viewport内，可以按下Esc下面的波浪键<code>~</code>调出虚幻的cmd控制台</li><li>或者是Window-&gt;Developer Tools开发者工具-&gt;找到Output Log</li></ul><p><img src="https://picb.zhimg.com/80/v2-bce433dabeadf18131c24909c029a0af_1440w.jpg" alt="img"></p><p>比如我们键入 <code>r.shadowQuality 0</code>，那么物体就不会有阴影了。 再<code>r.shadowQuality 1</code>那么物体就又有阴影了，但是可能很难看有锯齿，如下面动图开始的时候，可以<code>r.shadowQuality 4</code>让阴影效果更好一点。</p><p><img src="https://pic4.zhimg.com/v2-819fdc681fcd14c85efef703158912f6_b.jpg" alt="img"></p><hr><h2 id="【1-3】Deferred-Forward-Rendering-延迟渲染-正向渲染"><a href="#【1-3】Deferred-Forward-Rendering-延迟渲染-正向渲染" class="headerlink" title="【1.3】Deferred/Forward Rendering 延迟渲染/正向渲染"></a>【1.3】Deferred/Forward Rendering 延迟渲染/正向渲染</h2><p>【1.3.1】区别</p><p>简单来说，并非像以下这么绝对。</p><ul><li>Deferred Rendering 延迟渲染 延迟渲染能够让大型应用拥有更出色稳定的性能。（PC游戏）</li><li>Forward Rendering 正向渲染 正向渲染能够为小型应用或者是低端设备带来更为流畅的性能。（手游、VR游戏，针对硬件性能有限的设备）</li></ul><p>市面上所有的引擎要么采用延迟渲染，要么采用正向渲染，反正总共有两种方式实现实时渲染，虚幻默认采用的是延迟渲染，但是也可以设置为正向渲染。</p><p>在多数情况中，延迟渲染最合适。</p><p>基本上市面上所看到的所有游戏大作基本都是采用延迟渲染的方案的。</p><p>【1.3.2】缺点</p><p><strong>延迟渲染的缺点：抗锯齿。（正向渲染能提供更好的抗锯齿效果），毕竟两者的实现方案不同。</strong></p><p><strong>延迟渲染中，我们只能使用TAA：Temporal Anti-Aliasing，临时抗锯齿。但是</strong>TAA会导致画面中看到重影。</p><hr><h2 id="【1-4】G-Buffer"><a href="#【1-4】G-Buffer" class="headerlink" title="【1.4】G-Buffer"></a>【1.4】G-Buffer</h2><p>【1.4.1】本质</p><p>G缓冲，延迟渲染器需要使用到G缓冲，正向渲染通常不需要。</p><p><strong>G缓冲本质上是为每一帧画面准备的一组图像，这些图像包含了渲染管线中后期要用到的所有信息。</strong></p><p>我们本质上就是在实时合成图像，就是要渲染出不同版本的图像，然后将这些侧重点各异的图像保存在G缓冲中，我们可以借助这些图像计算出其他内容，并将其用于进一步画面渲染。</p><p>【1.4.2】举例</p><p>我们如何在场景中添加雾效呢？</p><p>为了加入fog，我们需要计算出场景的高度是多少，所以我们需要在前期阶段中将高度信息保存在G缓冲中。</p><p>这完全由后台执行，但我们还是要了解它的存在，理解它的作用，因为它能够让我们知道为什么实时渲染会有一些强项和弱点。</p><p>然后讲师提到了RenderDoc。</p><p>刚好之前也拿这个RenderDoc 帧捕获调试器，提取过动态画面的单帧 静态图片/模型，导出过谷歌地图上的三维模型，大家可以去试试啊，也没几步。</p><p><a href="https://zhuanlan.zhihu.com/p/149670002">X Tesla：【Blender】Google Map+ GIS（全免费！国内国外 卫星地图数据都可转成三维模型！）zhuanlan.zhihu.com<img src="https://pic4.zhimg.com/v2-b5d18f31c2e585f4f23aa661f8905fa3_180x120.jpg" alt="图标"></a></p><p><img src="https://picb.zhimg.com/80/v2-78ff5826025f5b81401cee30cefbfeef_1440w.jpg" alt="img"></p><p>我们也可以在UE4这里看到GBuffer的各种信息。</p><p><img src="https://picb.zhimg.com/80/v2-9d050c1050a770ac988f7eed56c7d13a_1440w.jpg" alt="img"></p><p>所有的图像加起来就构成了所谓的GBuffer，即GBuffer缓冲，如上Base Color、Specular等。</p><p><img src="https://picb.zhimg.com/80/v2-8542607cf43267873976858bb4704b09_1440w.jpg" alt="img"></p><h2 id="【1-5】顶点着色器和像素着色器"><a href="#【1-5】顶点着色器和像素着色器" class="headerlink" title="【1.5】顶点着色器和像素着色器"></a>【1.5】顶点着色器和像素着色器</h2><p>在渲染过程中，会有一些非常简单的运算通常会被一遍又一遍地重复执行，会占用非常多的时间，如果用常规处理器计算会非常慢。无论是常规CPU还是其他常规计算机硬件，都不适合用于反复处理数以百万计的简单运算，因为这样效率会很低。</p><p>着色器就是——专门用于进行此类重复工作的硬件和软件。着色器不管如何变化，本质上都是被用于在一些GPU特定区域中重复执行一些简单运算，<strong>这是实时渲染的核心，</strong>因此对于我们的渲染方式以及性能损耗有非常大的影响。</p><p>CPU GPU 相关，这篇讲得好玩又透彻。</p><p><a href="https://zhuanlan.zhihu.com/p/61358167">xiaomengge：GPU并行架构及渲染优化zhuanlan.zhihu.com<img src="https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg" alt="图标"></a></p><h2 id="【像素着色器】Pixel-Shader-基于像素计算"><a href="#【像素着色器】Pixel-Shader-基于像素计算" class="headerlink" title="【像素着色器】Pixel Shader 基于像素计算"></a>【像素着色器】Pixel Shader 基于像素计算</h2><p>像素着色器会接受一个输入值，比如会接收屏幕中间像素值，然后它会计算出当要被渲染的对象距离摄像机这么远的时候，雾有一种颜色和浓度。</p><p><img src="https://pic1.zhimg.com/80/v2-59b0f2a665c4a86c5d37525262ace013_1440w.jpg" alt="img">开启大气雾</p><p>先获取雾消逝时候的像素颜色，并在上面叠加颜色效果，然后在加入这种颜色的基础上，重新计算像素颜色。</p><p><img src="https://pic4.zhimg.com/80/v2-da8a6f3260e34770b4cfc4e46f1fd889_1440w.jpg" alt="img">关掉大气雾</p><p>渲染流程中的几乎每一步都是用像素着色器完成的，通过修改输入值重新计算颜色，然后输出结果。</p><p>所有实时光照，所有着色，材质，雾效，后期处理和许多其他效果，都是基于像素着色器进行渲染的，它对于渲染管线非常重要，第二节中会讲到。</p><h2 id="【顶点着色器】Vertex-Shader-基于顶点计算"><a href="#【顶点着色器】Vertex-Shader-基于顶点计算" class="headerlink" title="【顶点着色器】Vertex Shader 基于顶点计算"></a>【顶点着色器】Vertex Shader 基于顶点计算</h2><p>讲师本节还没提到，下节学习呀。</p><h2 id="【1-6】官方问题（课堂小结）"><a href="#【1-6】官方问题（课堂小结）" class="headerlink" title="【1.6】官方问题（课堂小结）"></a>【1.6】官方问题（课堂小结）</h2><p>【1】抗锯齿是延迟渲染的缺点</p><p><img src="https://pic4.zhimg.com/80/v2-294f5eec5f4819769bce094e17afe473_1440w.jpg" alt="img"></p><p>【2】G Buffer 会创建渲染过程后期各阶段需要的各种信息。</p><p><img src="https://picb.zhimg.com/80/v2-f0facf6e860a0b34ef6cd4b2ca479d8c_1440w.jpg" alt="img"></p><p>【3】延迟渲染适合3A游戏，对硬件设备要求高。正向渲染适合低配硬件设备（手机、VR等）</p><p><img src="https://pic2.zhimg.com/80/v2-a155a33471e1afc806e6edf690dba0af_1440w.jpg" alt="img"></p><p><img src="https://picb.zhimg.com/80/v2-0f833d294f203eec4d771668a6e5e4ce_1440w.png" alt="img"></p><h2 id="二、实时渲染性能相关"><a href="#二、实时渲染性能相关" class="headerlink" title="二、实时渲染性能相关"></a>二、实时渲染性能相关</h2><ul><li><p>目标帧率</p></li><li><p>帧时间、GPU CPU</p></li><li><p>分析基础（Profiling Basics）</p></li><li><p>四种最为常见的性能问题</p></li><li><ul><li>Translucency 半透明</li><li>材质</li><li>draw calls 绘制调用</li><li>Shadows 阴影</li></ul></li></ul><p><img src="https://pic2.zhimg.com/80/v2-b7f4c41bad4d27753f6262bdc4b5ca4f_1440w.jpg" alt="img"></p><hr><h2 id="【2-1】Target-Frame-Rate-目标帧率-和-FrameTime帧时间"><a href="#【2-1】Target-Frame-Rate-目标帧率-和-FrameTime帧时间" class="headerlink" title="【2.1】Target Frame Rate 目标帧率 和 FrameTime帧时间"></a>【2.1】Target Frame Rate 目标帧率 和 FrameTime帧时间</h2><p>默认情况下，Unreal的目标帧率（Frame Rate）在每秒30帧左右，就是FPS啦，值越高效果越棒，画面越流畅。</p><p>还有按秒测算性能的，如ms（milliseconds）毫秒。</p><p>1s=1000ms。</p><ul><li>如果帧速率是30fps的话</li><li>对应的frametime就是 1000/30≈ 33.3 毫秒每帧</li></ul><p>即</p><ul><li>framerate——每秒帧数——30fps——30 frame per second——每秒三十帧左右</li><li>frametime——每帧秒数——33.3 mspf 吧 ——33.3 milliseconds per frame——每帧三十多毫秒左右</li></ul><p>用frametime 来描述场景的流畅程度，这是渲染单帧画面所需的时间，时间越久，帧率就越低，分子1000是固定的，所以时间和帧率是成反比关系的。</p><ul><li>60frame/ s，对应 16ms/frame</li><li>30frame/ s，对应 33ms/frame</li></ul><p>ms越小，画面更流畅。</p><p>总之，用frametime测算性能比framerate测算更加精确，在引擎开发中经常使用到这种单位。</p><h3 id="【实际测算】"><a href="#【实际测算】" class="headerlink" title="【实际测算】"></a>【实际测算】</h3><p>虚幻cmd中</p><p>【1】</p><ul><li><code>stat fps</code>显示帧率 ，或者是下面两个红框。</li></ul><p><img src="https://pic3.zhimg.com/80/v2-1510e9515b916a3bd91e71a10e91e741_1440w.jpg" alt="img"></p><p>如下，它显示了帧率和frametime。</p><p><img src="https://pic2.zhimg.com/80/v2-8d772b6d996068925fc2efdbb8e3d21c_1440w.jpg" alt="img"></p><ul><li><code>t.maxfps 600</code>设置最大帧速率为600。（如果要评估性能，最好去掉帧率上限，否则无法真实反映场景的性能和画面效果）</li></ul><p>【2】</p><ul><li><code>stat unit</code> ，我们可以看到更多的数据，这就是用frametime ms毫秒为单位来进行测算场景性能的。</li></ul><p><img src="https://pic2.zhimg.com/80/v2-38db27ebf28622eac7488b8babf8ab8e_1440w.jpg" alt="img"></p><p>Game（CPU）和GPU是最重要的指标。</p><hr><h3 id="【2-2】GPU和CPU的相关计算分配工作"><a href="#【2-2】GPU和CPU的相关计算分配工作" class="headerlink" title="【2.2】GPU和CPU的相关计算分配工作"></a>【2.2】GPU和CPU的相关计算分配工作</h3><ul><li>CPU一般负责场景中所有与 Transform（位置、旋转、缩放）变换相关的计算工作，如动画、物理、碰撞、AI、SpawnActors</li><li>GPU一般负责光照、模型自身渲染、反射、着色等相关工作。</li></ul><p><img src="https://pic4.zhimg.com/80/v2-19e8212d8469aee366befb32649b2947_1440w.jpg" alt="img"></p><p>如果我们想提升游戏的性能，就需要确定是CPU还是GPU影响的，如果是CPU影响的，就没必要优化GPU，两者相互制约。</p><p><strong>要弄清谁影响应用导致运行慢，否则要想提升性能都不知道要调整工作流当中的哪个环节。</strong></p><hr><h2 id="【2-3】Profiling-Basics-分析基础"><a href="#【2-3】Profiling-Basics-分析基础" class="headerlink" title="【2.3】Profiling Basics 分析基础"></a>【2.3】Profiling Basics 分析基础</h2><p>基础的就是stat unit/fps，但是还有很多其他深奥的命令。</p><p>如果要取消当前分析数据显示，就在cmd中再输入一遍这条命令，或者是viewport中下拉小箭头将对应的数据勾去掉。</p><p>常用的：</p><ul><li><code>stat rhi</code> drawcall次数及场景内多边形三角形数量</li></ul><p><img src="https://pic1.zhimg.com/80/v2-e826105b5127e2ef8885165689c10275_1440w.jpg" alt="img"></p><ul><li><code>stat scenerendering</code> 我们可以看清每一个环节渲染所耗费的时间</li></ul><p><img src="https://pic4.zhimg.com/80/v2-dcfb215784a3ab3f386e151f8965b8a4_1440w.jpg" alt="img"></p><ul><li><code>stat gpu</code> GPU的相关渲染工作耗费的时间</li></ul><p><img src="https://pic1.zhimg.com/80/v2-e355bdb93820af9a106d2bb485abb98b_1440w.jpg" alt="img"></p><p>更多的还是到这里advanced查找，cmd输入的话，对应的名称前面加stat就可以了。</p><p><img src="https://pic2.zhimg.com/80/v2-be5fe944d6414d2c1d326768cc9d3dc5_1440w.jpg" alt="img"></p><hr><h2 id="【2-4】四种常见的性能问题"><a href="#【2-4】四种常见的性能问题" class="headerlink" title="【2.4】四种常见的性能问题"></a>【2.4】四种常见的性能问题</h2><hr><h3 id="【1】Translucency"><a href="#【1】Translucency" class="headerlink" title="【1】Translucency"></a>【1】Translucency</h3><h3 id="渲染半透明物体非常复杂，而且开销很大。"><a href="#渲染半透明物体非常复杂，而且开销很大。" class="headerlink" title="渲染半透明物体非常复杂，而且开销很大。"></a>渲染半透明物体非常复杂，而且开销很大。</h3><p><img src="https://pic1.zhimg.com/80/v2-5cfdd071345e616af34c509d08497491_1440w.jpg" alt="img"></p><p>有趣的是，当相机离半透明物体很远的时候，帧率又提高到了原先的水平。所以<strong>距离</strong>也会影响性能（像素着色器嘛）。</p><p><img src="https://pic4.zhimg.com/80/v2-3c507dd0daf6e7d827be22abaa6108b3_1440w.jpg" alt="img"></p><p>这和 Pixel Shader 像素着色器的操作有关，半透明物体渲染工作十分依赖它。</p><p>我们可以打开Shader Complexity查看着色复杂程度</p><p><img src="https://pic4.zhimg.com/80/v2-9803a5677c2d35d0070feee050e2bd3e_1440w.jpg" alt="img"></p><p>绿色优 红色过渡 白色差。</p><p><strong>屏幕中每增加一层平面，就要多渲染一次半透明的效果，需要重新计算这些像素，因为它们叠加在其他层的上方。</strong>这样很快，像素着色器的开销就会非常巨大。</p><p><img src="https://pic3.zhimg.com/80/v2-30e807ce946bfb45bc654390e5883d71_1440w.jpg" alt="img"></p><p>学会使用Shader Complexity 着色器复杂度，谨防半透明开销过大。这也是为何相机在远处时，开销会变小的原因，因为物体当前只需要一丁点像素来渲染半透明平面。</p><p><img src="https://pic2.zhimg.com/80/v2-a70b3c3d0471cc95f4dc1367bea69849_1440w.jpg" alt="img"></p><hr><h3 id="【2】材质"><a href="#【2】材质" class="headerlink" title="【2】材质"></a>【2】材质</h3><p>材质也是基于像素着色器的。如果如下给定Noise材质，可以看到编译后有两千多条指令。</p><p><img src="https://picb.zhimg.com/80/v2-206ca350cb3313e06d72dee09503053d_1440w.jpg" alt="img"></p><p>而Complexity长条最多才2000条指令。</p><p><img src="https://pic4.zhimg.com/80/v2-1e10285dbea52ee27195160e60780663_1440w.png" alt="img"></p><p>这样视口中 显示模型为炽热白色。</p><p><img src="https://pic4.zhimg.com/80/v2-dd156b335b32a8de39aa9e78f4a5279a_1440w.jpg" alt="img"></p><p>当相机离物体越来越近的时候，帧率同样会下降。</p><p><strong>屏幕上复杂材质产生的像素越多，复杂材质对性能的影响就越大。如上Noise复杂材质产生很多像素。</strong></p><hr><h3 id="【3】Draw-Calls-绘制调用"><a href="#【3】Draw-Calls-绘制调用" class="headerlink" title="【3】Draw Calls 绘制调用"></a>【3】Draw Calls 绘制调用</h3><p><strong>当引擎渲染场景时，不会逐像素渲染，也不会逐区域渲染，逐线条渲染，而是逐对象渲染。</strong></p><p>可以用 Renderdoc 查看GPU到底在渲染啥？Renderdoc适合各种实时渲染工具，可以从显卡中抓取数据并分析。</p><p>下面红框中就是要依次渲染的各个模型了，绿色是模型网格体。</p><p><img src="https://pic1.zhimg.com/80/v2-c1128c16368efc9b9fe3f9d867b2c26d_1440w.jpg" alt="img"></p><h3 id="每个模型的渲染都是一次Draw-Call-绘制调用，drawcall绘制调用还有一些其他含义，但简单起见，就假设一个模型就是一次绘制调用。"><a href="#每个模型的渲染都是一次Draw-Call-绘制调用，drawcall绘制调用还有一些其他含义，但简单起见，就假设一个模型就是一次绘制调用。" class="headerlink" title="每个模型的渲染都是一次Draw Call 绘制调用，drawcall绘制调用还有一些其他含义，但简单起见，就假设一个模型就是一次绘制调用。"></a>每个模型的渲染都是一次Draw Call 绘制调用，drawcall绘制调用还有一些其他含义，但简单起见，就假设一个模型就是一次绘制调用。</h3><p>因此，开销并不取决于场景中的多边形数量，而是取决于绘制调用，即DrawCall的次数。</p><p>场景中会有多少独立的模型会决定渲染质量。</p><p>如下，粒子的Mesh Renderer生成750个雕塑，帧率直线下降到15FPS。</p><p><img src="https://picb.zhimg.com/80/v2-d696b50e4bd225c5990b42eedafee26d_1440w.jpg" alt="img"></p><p>我们可以查看draw call 次数通过我们上述的 <code>stat rhi</code>命令</p><p>在stat rhi 中我们还可以看到</p><ul><li>三角形绘制次数（Triangle Drawn）即要渲染的多边形总数量</li><li>还有<strong>Draw Primitive Calls（绘制图元次数，就是Draw Calls）</strong></li><li>还有Lines Drawn</li></ul><p><img src="https://picb.zhimg.com/80/v2-ee6bafa222858a1f0b935b1e6cbce7fb_1440w.jpg" alt="img"></p><p><strong>可以看到这750个雕塑共调用次数8400多，场景模型面数总量1700万多 。</strong></p><p>而这个彩色多边形的多边形数量较少，但是绘制调用的次数会更多，因为每个材质球就意味着一次绘制调用。（这个可以归类到2.4.2中材质对渲染性能的影响）</p><p><img src="https://pic2.zhimg.com/80/v2-46bcd8aa804c8fe6a877dcc337a22863_1440w.jpg" alt="img"></p><p>这个带材质的，要绘制的三角形 面数总量1600多万多，但是要DrawCall 三四万，FPS降至了10。</p><p><img src="https://pic3.zhimg.com/80/v2-5d87a4c5f6055cd1a2eb0d7c06068dc3_1440w.jpg" alt="img"></p><p>如果去掉材质，只有一种材质。</p><p><img src="https://picb.zhimg.com/80/v2-e8bf9cd81b915e43fb1fca93ae6f73b8_1440w.jpg" alt="img"></p><p>而且面数还多得很，但性能显著提升。</p><p><img src="https://pic1.zhimg.com/80/v2-43764a13f0ba3a4326132c3a87635999_1440w.jpg" alt="img"></p><p>引擎以绘制调用为单位进行渲染。以上我们分别用三座雕像做实验，试着改变模型的渲染数量，查看它们对性能的影响。</p><hr><h3 id="【4】动态阴影"><a href="#【4】动态阴影" class="headerlink" title="【4】动态阴影"></a>【4】动态阴影</h3><p>动态阴影的开销也非常大。开销大的不是动态光照，而是动态阴影。</p><p>同样我们用上述的雕塑进行测试。</p><p>可以用ConstructionScript 构造脚本写一个小函数，让灯光在指定场景范围内生成灯光。</p><p>打勾Cast Dynamic Shadows 查看动态阴影对渲染的影响。</p><p><img src="https://pic4.zhimg.com/80/v2-10ef44cd081f403caaa7345e1c6e496a_1440w.jpg" alt="img"></p><p>打开关闭 Shadows 阴影测试，关闭性能显著提升，打开下降。</p><p><img src="https://pic3.zhimg.com/80/v2-e8406701ef8ae19add164776b7890daf_1440w.jpg" alt="img"></p><p><strong>所以动态阴影也会导致性能差异，并非光源本身，删掉一些光源后，性能会提升，但是并没有阴影的影响那么大。</strong></p><p>如果将场景中的模型替换成高面数模型，性能直线下降。</p><p><strong>动态阴影会跟随场景中的多边形数量升高而产生更多的开销。</strong></p><p>所以如果想要使用大量动态阴影需要谨慎处理场景中的多边形数量。（尤其是大型森林渲染，好多植物嘛）</p><p>相反，<strong>如果我们只打算使用静态光照或者是根本不用动态光照，我们可以随意使用更多的多边形。</strong></p><hr><h2 id="【课后测试总结】"><a href="#【课后测试总结】" class="headerlink" title="【课后测试总结】"></a>【课后测试总结】</h2><p><img src="https://pic1.zhimg.com/80/v2-8a0f9338eed6381e2ebab84bbdd0872d_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/80/v2-f3a20cca767f1dd833bf6d5ab67fb438_1440w.png" alt="img"></p><h2 id="三、用Renderdoc-获取虚幻单帧图像"><a href="#三、用Renderdoc-获取虚幻单帧图像" class="headerlink" title="三、用Renderdoc 获取虚幻单帧图像"></a>三、用Renderdoc 获取虚幻单帧图像</h2><p>虚幻官方文档：</p><p><a href="https://link.zhihu.com/?target=https://docs.unrealengine.com/en-US/Engine/Performance/RenderDoc/index.html">RenderDocdocs.unrealengine.com</a></p><hr><h3 id="【1】下载Renderdoc"><a href="#【1】下载Renderdoc" class="headerlink" title="【1】下载Renderdoc"></a>【1】下载Renderdoc</h3><p><a href="https://link.zhihu.com/?target=https://renderdoc.org/builds">https://renderdoc.org/buildsrenderdoc.org</a></p><hr><h3 id="【2】解压并打开Renderdocgui-exe可执行程序"><a href="#【2】解压并打开Renderdocgui-exe可执行程序" class="headerlink" title="【2】解压并打开Renderdocgui.exe可执行程序"></a>【2】解压并打开Renderdocgui.exe可执行程序</h3><p><img src="https://pic1.zhimg.com/80/v2-f6f3d6764c5312275ca9722ee4b4d053_1440w.jpg" alt="img"></p><hr><h3 id="【3】开启UE4项目的Renderdoc插件并重启项目（为了引擎内F12就可以直接捕获或通过命令行捕获）"><a href="#【3】开启UE4项目的Renderdoc插件并重启项目（为了引擎内F12就可以直接捕获或通过命令行捕获）" class="headerlink" title="【3】开启UE4项目的Renderdoc插件并重启项目（为了引擎内F12就可以直接捕获或通过命令行捕获）"></a>【3】开启UE4项目的Renderdoc插件并重启项目（为了引擎内F12就可以直接捕获或通过命令行捕获）</h3><p><img src="https://pic1.zhimg.com/80/v2-b4fc42d210459230c7c7ece1a8fdfbba_1440w.jpg" alt="img"></p><hr><h3 id="【4】设置要捕获的UE4指定项目"><a href="#【4】设置要捕获的UE4指定项目" class="headerlink" title="【4】设置要捕获的UE4指定项目"></a>【4】设置要捕获的UE4指定项目</h3><p><img src="https://pic1.zhimg.com/80/v2-bf4569c205f402959c6df19b8620c4cc_1440w.jpg" alt="img"></p><p>这个Executable Path实际上是通过cmd命令行 启动引擎然后让我们选项目的，我们还可以通过cmd命令行打开指定的某个项目，指定项目的某个关卡，具体看爱戴老师的文章哈，这样直接cmd渲染视频也非常快。</p><p>[戴巍：<a href="https://zhuanlan.zhihu.com/p/177696943">UE4,automation]UE4批渲染cmd篇zhuanlan.zhihu.com<img src="https://picb.zhimg.com/v2-2455d9ee3775f5ef13dc87da176d0812_180x120.jpg" alt="图标"></a></p><p>简而言之就是：</p><ol><li>新建并打开txt文件</li><li>双引号中填引擎对应版本的editor.exe，然后空格一次，加上 你的项目路径（u.project)，打开指定地图就是再加上 /Game/……(Game就是你的Content）</li><li>然后修改txt后缀为 bat批处理文件。</li></ol><pre><code class="hljs text">&quot;D:\Program Files\UE_4.24\Engine\Binaries\Win64\UE4Editor.exe&quot; D:\Projects\UnrealProjects\renderMovieTest\renderMovieTest.uproject /Game/maps/shot0010</code></pre><h3 id="针对Renderdoc："><a href="#针对Renderdoc：" class="headerlink" title="针对Renderdoc："></a>针对Renderdoc：</h3><p>【打开引擎选项目】</p><pre><code class="hljs text">D:\Program Files\Epic Games\UE_4.25\Engine\Binaries\Win64\UE4Editor.exe</code></pre><p>【直接打开指定项目】</p><p>设置Command-Line Arguments。</p><p><img src="https://pic3.zhimg.com/80/v2-49f329b2bca84815fc9e9ca9c8c8f1da_1440w.png" alt="img"></p><hr><h3 id="【5】从Renderdoc-Launch打开UE4项目，可以看到这个D3D11。"><a href="#【5】从Renderdoc-Launch打开UE4项目，可以看到这个D3D11。" class="headerlink" title="【5】从Renderdoc Launch打开UE4项目，可以看到这个D3D11。"></a>【5】从Renderdoc Launch打开UE4项目，可以看到这个D3D11。</h3><p>当时打开Chrome捕捉国外模型也出现过这个黑条。</p><p><img src="https://pic4.zhimg.com/80/v2-df25276f1dba7d757535ca3090076ebf_1440w.jpg" alt="img"></p><hr><h3 id="【6】捕捉注意事项"><a href="#【6】捕捉注意事项" class="headerlink" title="【6】捕捉注意事项"></a>【6】捕捉注意事项</h3><p>看了大佬们的解决方案，并没有起效，测试了一番总结一下。</p><p><a href="https://www.zhihu.com/question/400925990">ue4 renderdoc capture?www.zhihu.com<img src="https://zhstatic.zhihu.com/assets/zhihu/editor/zhihu-card-default.svg" alt="图标"></a></p><p><strong>【6.1】必须从Renderdoc Launch 项目</strong></p><p><strong>【6.2】两种捕获方式</strong></p><ul><li>回到RenderDoc中 Capture Frames Immediately</li><li>或者是直接在UE4 界面中 按下 F12/PrintScreen（PS） 即可捕获。</li></ul><p><img src="https://pic2.zhimg.com/80/v2-c94e34d3d86718bed39d9fa05a986d59_1440w.jpg" alt="img"></p><p><strong>【6.3】成功捕获Viewport内场景方案</strong></p><p>最终我跌过无数坑反复测试后 成功的办法是：</p><p>它不是提示要F11全屏Cycle Betwteen Windows嘛。</p><p><img src="https://pic4.zhimg.com/80/v2-bf023520639c5a71692813bfdd05bba1_1440w.png" alt="img"></p><p>那就NewEditorWindow运行。</p><p>F11 然后再F12捕获就可以了。</p><p><img src="https://pic1.zhimg.com/80/v2-71935c2259f8ef7f74646f9c81527254_1440w.png" alt="img"></p><p><img src="https://pic3.zhimg.com/80/v2-8386c038099183d6ebd4a3096393a847_1440w.jpg" alt="img"></p><p><strong>【6.4】其他相关测试</strong></p><p>【1】4.25安装renderdoc插件后，没有这个直接渲染的按钮。</p><p><img src="https://pic4.zhimg.com/80/v2-5db0b5b5f82919247af7fb0124315098_1440w.jpg" alt="img"></p><p>【2】默认不勾选这个Capture all activity，可是还是捕获到所有窗口。</p><p><img src="https://picb.zhimg.com/80/v2-533a9fb9baa6231b47474cf5e08a25c0_1440w.jpg" alt="img"></p><p>【3】GameView不成功。</p><p>Alt+P项目运行后New Editor Window，然后Shift+F1 Eject 挪出鼠标导Renderdoc中Capture Frames。</p><hr><h3 id="【7】测试调节"><a href="#【7】测试调节" class="headerlink" title="【7】测试调节"></a>【7】测试调节</h3><p>然后双击打开捕获的图像即可。（确保是Established 连接建立，而且API是D3D11才能捕获）。</p><p>【Event Browser】为当前捕捉事件的所有过程，可以看到有很多Draw Index，GBuffer也在其中（BasePass）。</p><p>【MeshViewer】查看三角形绘制情况</p><p><img src="https://picb.zhimg.com/80/v2-9192e43769b90a4d6e18362dc458f4cf_1440w.jpg" alt="img"></p><p>【Pipeline State】查看渲染的整个流程</p><ul><li>顶点着色器</li><li>剔除</li><li>光栅化</li><li>像素着色器</li></ul><p>啥的。</p><p><img src="https://pic1.zhimg.com/80/v2-37d03f66ac694ee17464f3ef8c7a3106_1440w.jpg" alt="img"></p><p>【TextureViewer】BasePass中找到各种GBuffer</p><p><img src="https://pic4.zhimg.com/80/v2-900056b781b306e423e503013415a274_1440w.jpg" alt="img"></p><p><img src="https://pic2.zhimg.com/v2-977555ebe37e748ed1e94c71841ae3ea_b.jpg" alt="img"></p><p>也可以用Renderdoc捕获Google三维地图模型呀。</p><p><a href="https://zhuanlan.zhihu.com/p/149670002">X Tesla：【Blender】Google Map+ GIS（全免费！国内国外 卫星地图数据都可转成三维模型！）zhuanlan.zhihu.com<img src="https://pic4.zhimg.com/v2-b5d18f31c2e585f4f23aa661f8905fa3_180x120.jpg" alt="图标"></a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>【UE4】有意思吧</title>
    <link href="/2020/08/08/%E3%80%90UE4%E3%80%91%E6%9C%89%E6%84%8F%E6%80%9D%E5%90%A7/"/>
    <url>/2020/08/08/%E3%80%90UE4%E3%80%91%E6%9C%89%E6%84%8F%E6%80%9D%E5%90%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="更新于-2020-8-1"><a href="#更新于-2020-8-1" class="headerlink" title="更新于 2020.8.1"></a>更新于 2020.8.1</h2><h2 id="【导图】"><a href="#【导图】" class="headerlink" title="【导图】"></a>【导图】</h2><p><img src="https://pic1.zhimg.com/80/v2-d268329239dbcd1a83b566112003a02f_1440w.jpg" alt="img"></p><h2 id="专栏是比较适合新手的，不像其他大佬搞得那么高大上，大家一起加油学习，从一个noob变成niubi，从一个孙子变成一个爷爷。"><a href="#专栏是比较适合新手的，不像其他大佬搞得那么高大上，大家一起加油学习，从一个noob变成niubi，从一个孙子变成一个爷爷。" class="headerlink" title="专栏是比较适合新手的，不像其他大佬搞得那么高大上，大家一起加油学习，从一个noob变成niubi，从一个孙子变成一个爷爷。"></a>专栏是比较适合新手的，不像其他大佬搞得那么高大上，大家一起加油学习，从一个noob变成niubi，从一个孙子变成一个爷爷。</h2><p>专栏地址：</p><p><a href="https://zhuanlan.zhihu.com/UE4-Interesting">UE4有意思吧zhuanlan.zhihu.com<img src="https://pic2.zhimg.com/v2-47adb2b54f42614ddf853fb711971b2a_ipico.jpg" alt="图标"></a></p><p>专栏域名：<a href="https://zhuanlan.zhihu.com/UE4-Interesting">https://zhuanlan.zhihu.com/UE4-Interesting</a> （UE4-Interesting）</p><p><img src="https://pic2.zhimg.com/80/v2-ab63fe22a0dbb8be20ef686565d86912_1440w.png" alt="img"></p><h2 id="一、Blender篇："><a href="#一、Blender篇：" class="headerlink" title="一、Blender篇："></a>一、Blender篇：</h2><p><img src="https://pic4.zhimg.com/80/v2-5ccaacf3500fb1c1a8aed13f36ec24b9_1440w.jpg" alt="img"></p><h3 id="【1-快捷键大全】"><a href="#【1-快捷键大全】" class="headerlink" title="【1.快捷键大全】"></a>【1.快捷键大全】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/126650481">【Blender】快捷键大全（超级详细，应有尽有，不断更新）</a></li></ul><h3 id="【2-实战项目】"><a href="#【2-实战项目】" class="headerlink" title="【2.实战项目】"></a>【2.实战项目】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/126984474">【Blender】建模套路——房子【上】（新手必做的完整项目）</a></li><li><a href="https://zhuanlan.zhihu.com/p/128560071">【Blender】如何制作一个新冠病毒Coronavirus(消灭它只需要delete就可以)</a></li><li><a href="https://zhuanlan.zhihu.com/p/128658241">【Blender】方块波浪动画音乐效果</a></li><li><a href="https://zhuanlan.zhihu.com/p/129215585">【Blender】风格化人物彩色动画</a></li><li><a href="https://zhuanlan.zhihu.com/p/129264433">【Blender 】厕纸（听说老美的厕纸都脱销了？不够记得来Blender取啊）</a></li></ul><h3 id="【3-Modifier详解】"><a href="#【3-Modifier详解】" class="headerlink" title="【3.Modifier详解】"></a>【3.Modifier详解】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/137129909">【Blender】如何用 8 种 Modifier 快速制作各种摩天大楼（建模提升工作效率必看！）</a></li><li><a href="https://zhuanlan.zhihu.com/p/137398654">【Blender】 Modifier中篇 详解16种Modifier变形器</a></li></ul><h3 id="【4-贴图】"><a href="#【4-贴图】" class="headerlink" title="【4.贴图】"></a>【4.贴图】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/137449232">【Blender】 详解 凹凸贴图 Bump/Normal/Displacement 三者的区别</a></li><li><a href="https://zhuanlan.zhihu.com/p/137921844">【Blender】如何烘焙人物等高模的法线贴图,制作游戏需要的Low Poly(低模）模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/142243016">【Blender】如何使用遮罩贴图 像PS/Substance的图层一样给模型灵活快速地绘制贴图</a></li><li><a href="https://zhuanlan.zhihu.com/p/143639735">【Blender】如何提取烘焙 “现实世界”物件的贴图（学会之后你可以做一个你的母校/家/公司啦）</a></li></ul><h3 id="【5-UV】"><a href="#【5-UV】" class="headerlink" title="【5.UV】"></a>【5.UV】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/136033515">【Blender】UV详细解释及各种UV操作</a></li></ul><h3 id="【6-建模】"><a href="#【6-建模】" class="headerlink" title="【6.建模】"></a>【6.建模】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/133451089">【Blender】用力场跟布料模拟制作一个会自动充气的枕头（根本不用建模！）</a></li><li><a href="https://zhuanlan.zhihu.com/p/141995811">【三维角色建模】你是数学家？艺术家？懒人？还是土豪？</a></li><li><a href="https://zhuanlan.zhihu.com/p/144297756">【Blender】从球开始制做一个简单的人头（程序向，非美术向）</a></li><li><a href="https://zhuanlan.zhihu.com/p/144686672">【Blender】用SkinModifier+骨骼顶点“灵活”快速创建雕刻需要用的基本人物模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/149670002">【Blender】Google Map+ GIS（全免费！国内国外 卫星地图数据都可转成三维模型！）</a></li><li><a href="https://zhuanlan.zhihu.com/p/151010359">【Revit Vs Blender】新手实战项目 两种方法做一个建筑平面三维图【下篇Blender】</a></li></ul><h2 id="【7-Blendini】"><a href="#【7-Blendini】" class="headerlink" title="【7.Blendini】"></a>【7.Blendini】</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/144777286">【Blendini】Blender+Houdini 一场程序化节点建模的盛宴</a></li><li><a href="https://zhuanlan.zhihu.com/p/144846183">【Blendini】程序化建模实战项目——做一座 Low Poly Temple 简模寺庙之屋顶</a></li><li><a href="https://zhuanlan.zhihu.com/p/154594457">【Blendini】程序化建模 集锦</a></li></ul><h2 id="【8-Blunder】"><a href="#【8-Blunder】" class="headerlink" title="【8.Blunder】"></a>【8.Blunder】</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/148892405">【Blunder】Blender Vs UE4 【01】体素 特效哪家强？私生子Blunder亲爹娘</a></li></ul><h3 id="【9-插件-Python】"><a href="#【9-插件-Python】" class="headerlink" title="【9.插件/Python】"></a>【9.插件/Python】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/150773315">【Blender】常用Add-Ons</a></li><li><a href="https://zhuanlan.zhihu.com/p/138455778">【Blender】【0_基础篇】如何用Python脚本编写自己的插件</a></li><li><a href="https://zhuanlan.zhihu.com/p/143366913">【Blender】【1_物理模拟篇】用Python脚本对 成群方块 进行刚体物理模拟</a></li></ul><h3 id="【10-雕刻Sculpt】"><a href="#【10-雕刻Sculpt】" class="headerlink" title="【10.雕刻Sculpt】"></a>【10.雕刻Sculpt】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/144666264">【Blender】雕刻Sculpt基础知识（Dyntopo+7种Stroke+27种Brush)</a></li></ul><h3 id="【11-Grease-Pencil】"><a href="#【11-Grease-Pencil】" class="headerlink" title="【11.Grease Pencil】"></a>【11.Grease Pencil】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/145493548">【Blender】Grease Pencil（媲美PS、制作图像/2D 动画很方便、操作非常人性化）</a></li><li><a href="https://zhuanlan.zhihu.com/p/146053051">【Blender】GreasePencil 直接画三维模型（画模型 画人 画树都可以 原画师必备！）</a></li></ul><h3 id="【12-剪辑视频】"><a href="#【12-剪辑视频】" class="headerlink" title="【12.剪辑视频】"></a>【12.剪辑视频】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/143482669">【Blender】如何用Blender 快速剪辑视频（附赠Handbrake指南）</a></li></ul><h2 id="【13-粒子特效】"><a href="#【13-粒子特效】" class="headerlink" title="【13.粒子特效】"></a>【13.粒子特效】</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/148482481">【Blender】物理模拟之13种力场 Force Field + 粒子系统 【基础入门】</a></li></ul><h3 id="【14-VFX特效】"><a href="#【14-VFX特效】" class="headerlink" title="【14.VFX特效】"></a>【14.VFX特效】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/143642572">【Blender】【VFX 特效篇】 如何给拍好的视频添加三维模型</a></li></ul><h3 id="【15-常见Bug】"><a href="#【15-常见Bug】" class="headerlink" title="【15.常见Bug】"></a>【15.常见Bug】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/137891478">【Blender】Bug 哑喽</a></li></ul><p><img src="https://picb.zhimg.com/80/v2-0f833d294f203eec4d771668a6e5e4ce_1440w.png" alt="img"></p><h2 id="二、UE4篇："><a href="#二、UE4篇：" class="headerlink" title="二、UE4篇："></a>二、UE4篇：</h2><p><img src="https://pic1.zhimg.com/80/v2-a5b5b6ac26578bad87dea0c2393ce97d_1440w.jpg" alt="img"></p><h3 id="【1-材质】"><a href="#【1-材质】" class="headerlink" title="【1.材质】"></a>【1.材质】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/139665164">【UE4】HLSL语言基础</a></li><li><a href="https://zhuanlan.zhihu.com/p/133389856">【UE4】Decal &amp; Vertex Paint 基础入门</a></li><li><a href="https://zhuanlan.zhihu.com/p/87008643">【UE4】材质基础(一)——UV</a></li><li><a href="https://zhuanlan.zhihu.com/p/87762783">【UE4】材质基础(二)——Sphere Mask</a></li><li><a href="https://zhuanlan.zhihu.com/p/86591067">【UE4】特效(一）——制作Spiral粒子特效</a></li></ul><h3 id="【2-蓝图】"><a href="#【2-蓝图】" class="headerlink" title="【2.蓝图】"></a>【2.蓝图】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/134279765">【UE4】Spline BP 程序化模型/动画轨迹（爆肝般的详细）</a></li><li><a href="https://zhuanlan.zhihu.com/p/135297007">【UE4】用老罗 多人运动的方式”快速”打开并掌握 UE4蓝图BP(Blueprint)基础知识</a></li><li><a href="https://zhuanlan.zhihu.com/p/89653994">【UE4】FPS_#0_基本游戏框架</a></li><li><a href="https://zhuanlan.zhihu.com/p/89340105">【UE4】FPS_#1_第一人称镜头设置</a></li><li><a href="https://zhuanlan.zhihu.com/p/89342037">【UE4】FPS_#2_重定向角色动画</a></li><li><a href="https://zhuanlan.zhihu.com/p/116527083">【UE4】 如何用蓝图获取本地时间</a></li></ul><h3 id="【3-UI】"><a href="#【3-UI】" class="headerlink" title="【3.UI】"></a>【3.UI】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/135962214">【UE4】UI注意事项</a></li><li><a href="https://zhuanlan.zhihu.com/p/118135679">【UE4】如何在UI(Widget)播放视频</a></li><li><a href="https://zhuanlan.zhihu.com/p/139040508">【UE4】UI——创建多种常见大数据可视化Charts图表【上篇】</a></li></ul><h3 id="【4-特效】"><a href="#【4-特效】" class="headerlink" title="【4.特效】"></a>【4.特效】</h3><p><strong>Cascade：</strong></p><ul><li><a href="https://zhuanlan.zhihu.com/p/132700053">【UE4】Particle System（简单Beam）电流效果</a></li></ul><p><strong>Niagara：</strong></p><ol><li><a href="https://zhuanlan.zhihu.com/p/142416003">【UE4】Niagara |Spline BP| 带骨骼文字模型程序化对应Spline各个点【上篇】</a></li><li><a href="https://zhuanlan.zhihu.com/p/142723347">【UE4】Niagara |Spline BP| Spline线条环绕文字动态效果【中篇】</a></li><li><a href="https://zhuanlan.zhihu.com/p/143104075">【UE4】Niagara | Spline BP | 酷炫线条环绕文字运动效果【下篇】</a></li><li><a href="https://zhuanlan.zhihu.com/p/152185325">【UE4】Niagara基础入门+Niagara中的Spline 动画</a></li><li>Blunder 系列</li></ol><h3 id="【5-影视相关】"><a href="#【5-影视相关】" class="headerlink" title="【5.影视相关】"></a>【5.影视相关】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/128432597">【动捕面捕】——价格划算效果好的解决方案（非常详细）</a></li><li><a href="https://zhuanlan.zhihu.com/p/159285502">【UE4】诺亦腾动捕 注意事项（带hi5手套）</a></li><li><a href="https://zhuanlan.zhihu.com/p/164507212">【UE4】1 调节 /2 制作 /3 过渡 /4 使用动捕BVH/5 AR 人物角色动画</a></li><li><a href="https://zhuanlan.zhihu.com/p/158066175">【UE4】Facelink 面部捕捉（无需苹果开发者账号！无需花钱！无需打包！）</a></li><li><a href="https://zhuanlan.zhihu.com/p/158420499">【UE4】对自定义角色进行 动作捕捉面部捕捉</a></li><li><a href="https://zhuanlan.zhihu.com/p/157147699">【UE4】人物角色MorphTarget(Blendshape) 面部表情制作方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/163719061">【UE4】从头开始把自己打造成数字人类【01】——做基础人头模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/128499000">【MR混合现实】解决方案</a></li><li><a href="https://zhuanlan.zhihu.com/p/129886277">【Unreal Composure】MR混合现实（真人与虚幻场景的结合)</a></li></ul><h3 id="【6-常见Bug】"><a href="#【6-常见Bug】" class="headerlink" title="【6.常见Bug】"></a>【6.常见Bug】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/139445730">【UE4】Bug哑喽</a></li></ul><h3 id="【7-知识点】"><a href="#【7-知识点】" class="headerlink" title="【7.知识点】"></a>【7.知识点】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/134024820">【UE4】浅谈LOD(Level Of Details)</a></li></ul><h3 id="【8-插件】"><a href="#【8-插件】" class="headerlink" title="【8.插件】"></a>【8.插件】</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/148060326">【Sketchup 基础入门 与 UE4 Datasmith】</a></li><li><a href="https://zhuanlan.zhihu.com/p/117376265">【UE4】Unreal.js(Javascript&amp;Unreal)-1分钟入手</a></li></ul><p><img src="https://pic2.zhimg.com/80/v2-f3a20cca767f1dd833bf6d5ab67fb438_1440w.png" alt="img"></p><h2 id="三、Houdini篇："><a href="#三、Houdini篇：" class="headerlink" title="三、Houdini篇："></a>三、Houdini篇：</h2><p><img src="https://pic1.zhimg.com/80/v2-6bf3e25c324b42705a5d9dd912c5a712_1440w.jpg" alt="img"></p><ul><li><a href="https://zhuanlan.zhihu.com/p/99103145">【Houdini】0——基础界面与基础操作</a></li><li><a href="https://zhuanlan.zhihu.com/p/99106328">【Houdini】1——建模(1)——房子_1 (难度:易)</a></li></ul><p><img src="https://pic4.zhimg.com/80/v2-4ca6f1627dcb4c56df8a21a182d56f1b_1440w.png" alt="img"></p><h2 id="四、PS篇："><a href="#四、PS篇：" class="headerlink" title="四、PS篇："></a>四、PS篇：</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/135876259">【PS】常用操作及快捷键</a></li></ul><p><img src="https://pic1.zhimg.com/80/v2-0374b7a97fbd034f57ff724062d9c9eb_1440w.png" alt="img"></p><h3 id="五、Revit篇："><a href="#五、Revit篇：" class="headerlink" title="五、Revit篇："></a>五、Revit篇：</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/150783437">【Revit Vs Blender】新手实战项目 两种方法做一个建筑平面三维图【上篇 Revit】</a></li><li><a href="https://zhuanlan.zhihu.com/p/151789638">【Blender】如何优雅又强劲地借助CAD图纸提升Revit建模效率？（做游戏建筑也是超方便的哦）</a></li></ul><h2 id="——————————————————————"><a href="#——————————————————————" class="headerlink" title="——————————————————————-"></a>——————————————————————-</h2><p><img src="https://picb.zhimg.com/80/v2-6e14b44f78177839ea4c0e3361d6772c_1440w.png" alt="img"></p><h3 id="六、学习方法篇："><a href="#六、学习方法篇：" class="headerlink" title="六、学习方法篇："></a>六、学习方法篇：</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/113246467">【学习方法】不管学习什么，精通掌握这几种学习方法，你可能也会考上清华！</a></li><li><a href="https://zhuanlan.zhihu.com/p/126755967">【告知】看教程应该尽量看文档/文章</a></li></ul><p><img src="https://pic4.zhimg.com/80/v2-25a2be5b19b39bd5c2a36f8a05fbdf86_1440w.png" alt="img"></p><h2 id="七、其他篇："><a href="#七、其他篇：" class="headerlink" title="七、其他篇："></a>七、其他篇：</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/123035419">【素材】3D Warehouse——推荐给大家一个免费又好用的三维模型网站</a></li><li><a href="https://zhuanlan.zhihu.com/p/121681953">【方法】素材/教程/游戏等压缩包文件太大超过4G，百度网盘上传不了？</a></li><li><a href="https://zhuanlan.zhihu.com/p/165342174">【Typora】超全数学公式全集（没错，你想要的就在这里）</a></li></ul><p>编辑于 08-01</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
